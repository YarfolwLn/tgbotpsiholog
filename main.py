#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
#pip install aiogram python-docx openpyxl

#–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ requirements.txt
#aiogram==3.13.0
#aiohttp==3.9.5
#openpyxl==3.1.5

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
#pip install -r requirements.txt

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import openpyxl
from openpyxl.styles import PatternFill
from openpyxl import load_workbook
from openpyxl.styles import NamedStyle
import os
from datetime import datetime, timedelta
from openpyxl.styles import Alignment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
EXCEL_FILE = "appointments.xlsx"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def init_excel_file():
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞–ø–∏—Å–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ)
        headers = ["–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–ª–µ–≥—Ä–∞–º ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°–∏—Ç—É–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = [20, 20, 20, 15, 15, 30, 15]
        for col, width in enumerate(column_widths, 1):
            col_letter = openpyxl.utils.get_column_letter(col)
            ws.column_dimensions[col_letter].width = width
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —è—á–µ–µ–∫
        text_style = NamedStyle(name="text_style", number_format='@')  # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∫–Ω–∏–≥—É
        if 'text_style' not in wb.named_styles:
            wb.add_named_style(text_style)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
        for row in range(2, 100):  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
            for col in range(1, 8):  # –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                ws.cell(row=row, column=col).style = 'text_style'
        
        wb.save(EXCEL_FILE)
        logger.info("Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —è—á–µ–µ–∫")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AppointmentState(StatesGroup):
    user_name = State()
    user_phone = State()
    user_situation = State()
    choosing_days = State()
    entering_time_for_days = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
class ExcelManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.red_fill = PatternFill(start_color="FFB6C1", end_color="FFB6C1", fill_type="solid")
    
    def get_next_empty_row(self, ws):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        row = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        while ws.cell(row=row, column=1).value is not None:
            row += 1
        return row
    
    def book_appointment(self, days_str, time_range_str, username, user_id, phone, situation):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            wb = load_workbook(self.file_path)
            ws = wb.active
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            new_row = self.get_next_empty_row(ws)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
            ws.cell(row=new_row, column=1, value=str(days_str))      # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
            ws.cell(row=new_row, column=2, value=str(time_range_str)) # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
            ws.cell(row=new_row, column=3, value=str(username))      # –ò–º—è
            ws.cell(row=new_row, column=4, value=str(user_id))       # –¢–µ–ª–µ–≥—Ä–∞–º ID
            ws.cell(row=new_row, column=5, value=str(phone))         # –¢–µ–ª–µ—Ñ–æ–Ω
            ws.cell(row=new_row, column=6, value=str(situation))     # –°–∏—Ç—É–∞—Ü–∏—è
            ws.cell(row=new_row, column=7, value="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")  # –°—Ç–∞—Ç—É—Å
            
            # –ö—Ä–∞—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            for col in range(1, 8):
                ws.cell(row=new_row, column=col).fill = self.red_fill
            
            wb.save(self.file_path)
            wb.close()
            logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ {new_row}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {e}")
            return False
    
    def book_multiple_appointments(self, selected_days, days_with_times, username, user_id, phone, situation):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –¥–µ–Ω—å-–≤—Ä–µ–º—è"""
        try:
            wb = load_workbook(self.file_path)
            ws = wb.active
            
            success_count = 0
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            for day in selected_days:
                time_range = days_with_times.get(day, "")
                if time_range:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                    new_row = self.get_next_empty_row(ws)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –æ—Ç–¥–µ–ª—å–Ω–æ
                    ws.cell(row=new_row, column=1, value=str(day))          # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    ws.cell(row=new_row, column=2, value=str(time_range))   # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
                    ws.cell(row=new_row, column=3, value=str(username))     # –ò–º—è
                    ws.cell(row=new_row, column=4, value=str(user_id))      # –¢–µ–ª–µ–≥—Ä–∞–º ID
                    ws.cell(row=new_row, column=5, value=str(phone))        # –¢–µ–ª–µ—Ñ–æ–Ω
                    ws.cell(row=new_row, column=6, value=str(situation))    # –°–∏—Ç—É–∞—Ü–∏—è
                    ws.cell(row=new_row, column=7, value="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")  # –°—Ç–∞—Ç—É—Å
                    
                    # –ö—Ä–∞—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    for col in range(1, 8):
                        ws.cell(row=new_row, column=col).fill = self.red_fill
                    
                    success_count += 1
                    logger.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è –¥–Ω—è {day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ {new_row}")
            
            wb.save(self.file_path)
            wb.close()
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {success_count} –∑–∞–ø–∏—Å–µ–π –≤ Excel")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Excel
excel_manager = ExcelManager(EXCEL_FILE)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def get_back_to_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_days_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫")],
            [KeyboardButton(text="–°—Ä–µ–¥–∞"), KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥")],
            [KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞"), KeyboardButton(text="–°—É–±–±–æ—Ç–∞")],
            [KeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π")],
            [KeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_time_input_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
def is_valid_time_range(time_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9:00-12:00)"""
    try:
        if '-' not in time_str:
            return False, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:MM-–ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9:00-12:00)"
        
        start_time_str, end_time_str = time_str.split('-')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏
        start_time = datetime.strptime(start_time_str.strip(), '%H:%M')
        end_time = datetime.strptime(end_time_str.strip(), '%H:%M')
        
        if start_time >= end_time:
            return False, "‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
        
        return True, "–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        
    except ValueError:
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:MM-–ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9:00-12:00):"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_notification_to_admin(user_data, days_with_times):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        admin_chat_id = os.getenv("ADMIN_ID")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        notification_text = (
            "üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ\n\n"
            f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {user_data['user_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['user_phone']}\n"
            f"üÜî Telegram ID: {user_data['user_id']}\n"
        )
        
        if user_data['user_situation']:
            notification_text += f"üìù –°–∏—Ç—É–∞—Ü–∏—è: {user_data['user_situation']}\n"
        
        notification_text += f"\nüìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è:\n"
        for day, time_range in days_with_times.items():
            notification_text += f"‚Ä¢ {day}: {time_range}\n"
        
        notification_text += "\nüìã –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        notification_text += "\n‚ö†Ô∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"
        
        await bot.send_message(chat_id=admin_chat_id, text=notification_text)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º!\n\n"
            "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É\n"
            "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard()
        )

@dp.message(Command("help"))
async def cmd_help(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    
    help_text = """
üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º:
- –ù–∞–∂–º–∏—Ç–µ ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º¬ª
- –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è
- –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
- –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é
- –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
- ‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_command(message: types.Message, state: FSMContext):
    await cmd_help(message, state)

@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
async def book_appointment(message: types.Message, state: FSMContext):
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n\n",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(AppointmentState.user_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(AppointmentState.user_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_process(message, state)
        return
        
    if len(message.text.strip()) < 2:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n\n",
            reply_markup=get_back_to_main_keyboard()
        )
        return
        
    await state.update_data(user_name=message.text.strip())
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(AppointmentState.user_phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(AppointmentState.user_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_process(message, state)
        return
        
    phone = message.text.strip()
    if len(phone) < 5:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:\n\n",
            reply_markup=get_back_to_main_keyboard()
        )
        return
        
    await state.update_data(user_phone=phone)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è "
        "(—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—É –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ):\n\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å—ã–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" –∏–ª–∏ \"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\"\n\n",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.set_state(AppointmentState.user_situation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
@dp.message(AppointmentState.user_situation)
async def process_situation(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_process(message, state)
        return
        
    situation = message.text.strip()
    if situation.lower() in ["-", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É"]:
        situation = ""
        
    await state.update_data(user_situation=situation)
    
    await message.answer(
        "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∏–µ–º–∞:\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π¬ª\n\n",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(AppointmentState.choosing_days)
    await state.update_data(selected_days=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
@dp.message(AppointmentState.choosing_days)
async def process_days_selection(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_process(message, state)
        return
        
    user_data = await state.get_data()
    selected_days = user_data.get('selected_days', [])
    
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    if message.text in days_of_week:
        if message.text not in selected_days:
            selected_days.append(message.text)
            await message.answer(
                f"‚úÖ –î–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {', '.join(selected_days)}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π¬ª",
                reply_markup=get_days_keyboard()
            )
        else:
            selected_days.remove(message.text)
            await message.answer(
                f"‚ùå –£–¥–∞–ª–µ–Ω: {message.text}\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {', '.join(selected_days)}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π¬ª",
                reply_markup=get_days_keyboard()
            )
        
        await state.update_data(selected_days=selected_days)
        
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–Ω–µ–π":
        if not selected_days:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å:\n\n",
                reply_markup=get_days_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        await state.update_data(selected_days=selected_days)
        await state.update_data(days_with_times={})  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –¥–Ω—è–º
        await state.update_data(current_day_index=0)  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        
        user_data = await state.get_data()
        selected_days = user_data['selected_days']
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        first_day = selected_days[0]
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –¥–Ω–∏: {', '.join(selected_days)}\n\n"
            f"‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM-–ß–ß:MM\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 9:00-12:00 –∏–ª–∏ 14:00-16:00\n\n"
            f"{first_day}:",
            reply_markup=get_time_input_keyboard()
        )
        await state.set_state(AppointmentState.entering_time_for_days)
        
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n",
            reply_markup=get_days_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
@dp.message(AppointmentState.entering_time_for_days)
async def process_time_for_days(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_process(message, state)
        return
        
    user_data = await state.get_data()
    selected_days = user_data.get('selected_days', [])
    days_with_times = user_data.get('days_with_times', {})
    current_day_index = user_data.get('current_day_index', 0)
    
    current_day = selected_days[current_day_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    is_valid, message_text = is_valid_time_range(message.text.strip())
    
    if not is_valid:
        await message.answer(
            f"{message_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è\n\n"
            f"{current_day}:",
            reply_markup=get_time_input_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    days_with_times[current_day] = message.text.strip()
    await state.update_data(days_with_times=days_with_times)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
    next_day_index = current_day_index + 1
    
    if next_day_index < len(selected_days):
        # –ï—Å—Ç—å –µ—â–µ –¥–Ω–∏ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        next_day = selected_days[next_day_index]
        await state.update_data(current_day_index=next_day_index)
        
        await message.answer(
            f"‚úÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_day}, –í—Ä–µ–º—è: {message.text.strip()}\n\n"
            f"‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM-–ß–ß:MM\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 9:00-12:00 –∏–ª–∏ 14:00-16:00\n\n"
            f"{next_day}:",
            reply_markup=get_time_input_keyboard()
        )
    else:
        # –í—Å–µ –¥–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å
        user_name = user_data['user_name']
        user_phone = user_data['user_phone']
        user_situation = user_data.get('user_situation', '')
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        success = excel_manager.book_multiple_appointments(
            selected_days, days_with_times, user_name, user_id, user_phone, user_situation
        )
        
        if success:
            response = (
                f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üë§ –ò–º—è: {user_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"
            )
            
            if user_situation:
                response += f"üìù –°–∏—Ç—É–∞—Ü–∏—è: {user_situation}\n\n"
            else:
                response += "\n"
                
            response += f"üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è:\n"
            for day, time_range in days_with_times.items():
                response += f"‚Ä¢ {day}: {time_range}\n"
            
            response += (
                "\nüìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n"
            )
            
            await message.answer(response, reply_markup=get_main_keyboard())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            user_data['user_id'] = user_id
            await send_notification_to_admin(user_data, days_with_times)
            
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()

@dp.message(F.text == "‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_process(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        return
        
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏, –Ω–æ –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_back_to_main_keyboard()
        )
    else:
        await message.answer(
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
            reply_markup=get_main_keyboard()
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    init_excel_file()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



