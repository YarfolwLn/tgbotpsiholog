#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
#pip install aiogram python-docx openpyxl

#–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ requirements.txt
#aiogram==3.13.0
#aiohttp==3.9.5
#openpyxl==3.1.5

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
#pip install -r requirements.txt

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import openpyxl
from openpyxl.styles import PatternFill
from openpyxl import load_workbook
from openpyxl.styles import NamedStyle
import os
from datetime import datetime, timedelta
from openpyxl.styles import Alignment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
EXCEL_FILE = "appointments.xlsx"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª Excel –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def init_excel_file():
    if not os.path.exists(EXCEL_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞–ø–∏—Å–∏"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–¢–µ–ª–µ–≥—Ä–∞–º ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°–∏—Ç—É–∞—Ü–∏—è", "–°—Ç–∞—Ç—É—Å"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        column_widths = [15, 10, 20, 15, 15, 30, 15]
        for col, width in enumerate(column_widths, 1):
            col_letter = openpyxl.utils.get_column_letter(col)
            ws.column_dimensions[col_letter].width = width
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —è—á–µ–µ–∫
        date_style = NamedStyle(name="date_style", number_format='DD.MM.YYYY')
        time_style = NamedStyle(name="time_style", number_format='HH:MM')
        text_style = NamedStyle(name="text_style", number_format='@')  # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∫–Ω–∏–≥—É
        if 'date_style' not in wb.named_styles:
            wb.add_named_style(date_style)
        if 'time_style' not in wb.named_styles:
            wb.add_named_style(time_style)
        if 'text_style' not in wb.named_styles:
            wb.add_named_style(text_style)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
        for row in range(2, 50):  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 50 —Å—Ç—Ä–æ–∫
            ws.cell(row=row, column=1).style = 'date_style'    # –î–∞—Ç–∞
            ws.cell(row=row, column=2).style = 'time_style'    # –í—Ä–µ–º—è
            ws.cell(row=row, column=3).style = 'text_style'    # –ò–º—è
            ws.cell(row=row, column=4).style = 'text_style'    # –¢–µ–ª–µ–≥—Ä–∞–º ID
            ws.cell(row=row, column=5).style = 'text_style'    # –¢–µ–ª–µ—Ñ–æ–Ω
            ws.cell(row=row, column=6).style = 'text_style'    # –°–∏—Ç—É–∞—Ü–∏—è
            ws.cell(row=row, column=7).style = 'text_style'    # –°—Ç–∞—Ç—É—Å
        
        wb.save(EXCEL_FILE)
        logger.info("Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —è—á–µ–µ–∫")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AppointmentState(StatesGroup):
    choosing_date = State()
    choosing_time = State()
    user_name = State()
    user_phone = State()
    user_situation = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
class ExcelManager:
    def __init__(self, file_path):
        self.file_path = file_path
        self.red_fill = PatternFill(start_color="FFB6C1", end_color="FFB6C1", fill_type="solid")
    
    def book_appointment(self, date_str, time_str, username, user_id, phone, situation):
        """–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
        try:
            wb = load_workbook(self.file_path)
            ws = wb.active
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å–≤–æ–±–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            new_row = ws.max_row + 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            ws.cell(row=new_row, column=1, value=date_str)
            ws.cell(row=new_row, column=2, value=time_str)
            ws.cell(row=new_row, column=3, value=str(username))
            ws.cell(row=new_row, column=4, value=str(user_id))
            ws.cell(row=new_row, column=5, value=str(phone))
            ws.cell(row=new_row, column=6, value=str(situation))
            ws.cell(row=new_row, column=7, value="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
            
            # –ö—Ä–∞—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            for col in range(1, 8):
                ws.cell(row=new_row, column=col).fill = self.red_fill
            
            wb.save(self.file_path)
            wb.close()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Excel: {e}")
            return False

    def get_user_appointments(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            wb = load_workbook(self.file_path)
            ws = wb.active
            
            user_appointments = []
            for row in range(2, ws.max_row + 1):
                user_id_cell = ws.cell(row=row, column=4)
                if user_id_cell.value == str(user_id):
                    date = ws.cell(row=row, column=1).value
                    time = ws.cell(row=row, column=2).value
                    situation = ws.cell(row=row, column=6).value
                    status = ws.cell(row=row, column=7).value
                    user_appointments.append({
                        'date': date,
                        'time': time,
                        'situation': situation,
                        'status': status
                    })
            
            wb.close()
            return user_appointments
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Excel
excel_manager = ExcelManager(EXCEL_FILE)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
            [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def get_exit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_notification_to_admin(user_data, chosen_date_time, situation):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        admin_chat_id = os.getenv("ADMIN_ID")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        notification_text = (
            "üîî **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ**\n\n"
            f"üìÖ **–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:** {chosen_date_time}\n"
            f"üë§ **–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:** {user_data['user_name']}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_data['user_phone']}\n"
            f"üÜî **Telegram ID:** {user_data['user_id']}\n"
            f"üìã **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
        )
        
        if situation:
            notification_text += f"üìù **–°–∏—Ç—É–∞—Ü–∏—è:** {situation}\n"
        
        notification_text += "\n‚ö†Ô∏è **–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏**"
        
        await bot.send_message(chat_id=admin_chat_id, text=notification_text)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º!\n\n"
            "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É:\n"
            "‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–∏–µ–º –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É\n"
            "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard()
        )

@dp.message(Command("help"))
async def cmd_help(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üìÖ **–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º:**
- –ù–∞–∂–º–∏—Ç–µ ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º¬ª
- –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
- –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–∏—Ç—É–∞—Ü–∏—é
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

üìã **–ú–æ–∏ –∑–∞–ø–∏—Å–∏:**
- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫

üö™ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- ¬´üö™ –í—ã—Ö–æ–¥¬ª - –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
- ¬´‚Ü©Ô∏è –ù–∞–∑–∞–¥¬ª - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start
    """
    await message.answer(help_text)

@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_command(message: types.Message, state: FSMContext):
    await cmd_help(message, state)

@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º")
async def book_appointment(message: types.Message, state: FSMContext):
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024):",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AppointmentState.choosing_date)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@dp.message(AppointmentState.choosing_date)
async def process_date_input(message: types.Message, state: FSMContext):
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await exit_process(message, state)
        return
        
    input_date = message.text.strip()
    await state.update_data(chosen_date=input_date)
    
    await message.answer(
        "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AppointmentState.choosing_time)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(AppointmentState.choosing_time)
async def process_time_input(message: types.Message, state: FSMContext):
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await exit_process(message, state)
        return
        
    input_time = message.text.strip()
    await state.update_data(chosen_time=input_time)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    user_data = await state.get_data()
    chosen_date = user_data['chosen_date']
    
    await message.answer(
        f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_date} {input_time}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AppointmentState.user_name)

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_appointments(message: types.Message):
    user_id = message.from_user.id
    try:
        appointments = excel_manager.get_user_appointments(user_id)
        
        if appointments:
            response = "üìã **–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:**\n\n"
            for i, appt in enumerate(appointments, 1):
                response += f"{i}. **–î–∞—Ç–∞:** {appt['date']}\n"
                response += f"   **–í—Ä–µ–º—è:** {appt['time']}\n"
                response += f"   **–°—Ç–∞—Ç—É—Å:** {appt['status']}\n"
                if appt['situation']:
                    response += f"   **–°–∏—Ç—É–∞—Ü–∏—è:** {appt['situation']}\n"
                response += "\n"
            
            response += "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
            await message.answer(response)
        else:
            await message.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. "
                "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? –ù–∞–∂–º–∏—Ç–µ ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º¬ª"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    await message.answer("--–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é--\n"
"- ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º¬ª - –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
"- ¬´üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏¬ª - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫\n"
"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_keyboard())

@dp.message(F.text == "üö™ –í—ã—Ö–æ–¥")
async def exit_process(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(AppointmentState.user_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await exit_process(message, state)
        return
        
    if len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=get_exit_keyboard())
        return
        
    await state.update_data(user_name=message.text.strip())
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):", reply_markup=get_exit_keyboard())
    await state.set_state(AppointmentState.user_phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(AppointmentState.user_phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await exit_process(message, state)
        return
        
    phone = message.text.strip()
    if len(phone) < 5:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=get_exit_keyboard())
        return
        
    await state.update_data(user_phone=phone)
    await message.answer(
        "üìù –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è "
        "(—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥—É –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ):\n\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø–∏—Å—ã–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" –∏–ª–∏ \"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\"",
        reply_markup=get_exit_keyboard()
    )
    await state.set_state(AppointmentState.user_situation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@dp.message(AppointmentState.user_situation)
async def process_situation(message: types.Message, state: FSMContext):
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await exit_process(message, state)
        return
        
    situation = message.text.strip()
    if situation.lower() in ["-", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É"]:
        situation = ""
        
    user_data = await state.get_data()
    chosen_date = user_data['chosen_date']
    chosen_time = user_data['chosen_time']
    user_name = user_data['user_name']
    user_phone = user_data['user_phone']
    user_id = message.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ user_data –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user_data['user_id'] = user_id
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    success = excel_manager.book_appointment(chosen_date, chosen_time, user_name, user_id, user_phone, situation)
    
    if success:
        response = (
            f"‚úÖ **–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"üìÖ **–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:** {chosen_date}\n"
            f"‚è∞ **–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:** {chosen_time}\n"
            f"üë§ **–ò–º—è:** {user_name}\n"
            f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {user_phone}\n"
        )
        
        if situation:
            response += f"üìù **–°–∏—Ç—É–∞—Ü–∏—è:** {situation}\n\n"
        else:
            response += "\n"
            
        response += (
            "üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!"
        )
        
        await message.answer(response, reply_markup=get_main_keyboard())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_notification_to_admin(user_data, f"{chosen_date} {chosen_time}", situation)
        
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        return
        
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏, –Ω–æ –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üö™ –í—ã—Ö–æ–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_exit_keyboard()
        )
    else:
        await message.answer(
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
            reply_markup=get_main_keyboard()
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
    init_excel_file()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
